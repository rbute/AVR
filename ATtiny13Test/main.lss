
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000029e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  000002f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000009a  00000000  00000000  00000312  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000487  00000000  00000000  000003ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000001b0  00000000  00000000  00000833  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000003e1  00000000  00000000  000009e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  000000c0  00000000  00000000  00000dc4  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000001ce  00000000  00000000  00000e84  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000001db  00000000  00000000  00001052  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000030  00000000  00000000  0000122d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	09 c0       	rjmp	.+18     	; 0x14 <__ctors_end>
   2:	0e c0       	rjmp	.+28     	; 0x20 <__bad_interrupt>
   4:	0d c0       	rjmp	.+26     	; 0x20 <__bad_interrupt>
   6:	0c c0       	rjmp	.+24     	; 0x20 <__bad_interrupt>
   8:	0b c0       	rjmp	.+22     	; 0x20 <__bad_interrupt>
   a:	0a c0       	rjmp	.+20     	; 0x20 <__bad_interrupt>
   c:	09 c0       	rjmp	.+18     	; 0x20 <__bad_interrupt>
   e:	08 c0       	rjmp	.+16     	; 0x20 <__bad_interrupt>
  10:	07 c0       	rjmp	.+14     	; 0x20 <__bad_interrupt>
  12:	06 c0       	rjmp	.+12     	; 0x20 <__bad_interrupt>

00000014 <__ctors_end>:
  14:	11 24       	eor	r1, r1
  16:	1f be       	out	0x3f, r1	; 63
  18:	cf e9       	ldi	r28, 0x9F	; 159
  1a:	cd bf       	out	0x3d, r28	; 61
  1c:	16 d1       	rcall	.+556    	; 0x24a <main>
  1e:	3d c1       	rjmp	.+634    	; 0x29a <_exit>

00000020 <__bad_interrupt>:
  20:	ef cf       	rjmp	.-34     	; 0x0 <__vectors>

00000022 <_Z4sendh>:
#define Z	PORTB&=~(1<<pin)
#define O	PORTB|=(1<<pin)
#ifndef pin
#define pin 0
#endif
	DDRB|=(1<<pin);
  22:	b8 9a       	sbi	0x17, 0	; 23
	Z;
  24:	c0 98       	cbi	0x18, 0	; 24
	__asm__ volatile (
		"1: dec %0" "\n\t"
		"brne 1b"
		: "=r" (__count)
		: "0" (__count)
	);
  26:	2e e1       	ldi	r18, 0x1E	; 30
  28:	2a 95       	dec	r18
  2a:	f1 f7       	brne	.-4      	; 0x28 <_Z4sendh+0x6>
  2c:	20 e0       	ldi	r18, 0x00	; 0
  2e:	30 e0       	ldi	r19, 0x00	; 0
	_delay_us(sendDelay);
	int i;
	for(i=0;i<8;i++){
		data&(1<<i)?O:Z;
  30:	48 2f       	mov	r20, r24
  32:	50 e0       	ldi	r21, 0x00	; 0
  34:	6e e1       	ldi	r22, 0x1E	; 30
  36:	ca 01       	movw	r24, r20
  38:	02 2e       	mov	r0, r18
  3a:	02 c0       	rjmp	.+4      	; 0x40 <__SREG__+0x1>
  3c:	95 95       	asr	r25
  3e:	87 95       	ror	r24
  40:	0a 94       	dec	r0
  42:	e2 f7       	brpl	.-8      	; 0x3c <__CCP__+0x8>
  44:	80 ff       	sbrs	r24, 0
  46:	02 c0       	rjmp	.+4      	; 0x4c <__SREG__+0xd>
  48:	c0 9a       	sbi	0x18, 0	; 24
  4a:	01 c0       	rjmp	.+2      	; 0x4e <__SREG__+0xf>
  4c:	c0 98       	cbi	0x18, 0	; 24
  4e:	86 2f       	mov	r24, r22
  50:	8a 95       	dec	r24
  52:	f1 f7       	brne	.-4      	; 0x50 <__SREG__+0x11>
#endif
	DDRB|=(1<<pin);
	Z;
	_delay_us(sendDelay);
	int i;
	for(i=0;i<8;i++){
  54:	2f 5f       	subi	r18, 0xFF	; 255
  56:	3f 4f       	sbci	r19, 0xFF	; 255
  58:	28 30       	cpi	r18, 0x08	; 8
  5a:	31 05       	cpc	r19, r1
  5c:	61 f7       	brne	.-40     	; 0x36 <__CCP__+0x2>
		data&(1<<i)?O:Z;
		_delay_us(sendDelay);
	}
	O;
  5e:	c0 9a       	sbi	0x18, 0	; 24
  60:	8e e1       	ldi	r24, 0x1E	; 30
  62:	8a 95       	dec	r24
  64:	f1 f7       	brne	.-4      	; 0x62 <__SREG__+0x23>
	_delay_us(sendDelay);
}
  66:	08 95       	ret

00000068 <_Z7sendIntj>:
	sendInt('\n');
}
void printInt(unsigned int i){
	i?sendInt(i):send('0');
}
void sendInt(unsigned int i){
  68:	cf 93       	push	r28
  6a:	df 93       	push	r29
  6c:	ec 01       	movw	r28, r24
	if(i){
  6e:	00 97       	sbiw	r24, 0x00	; 0
  70:	59 f0       	breq	.+22     	; 0x88 <_Z7sendIntj+0x20>
		sendInt(i/10);
  72:	6a e0       	ldi	r22, 0x0A	; 10
  74:	70 e0       	ldi	r23, 0x00	; 0
  76:	fd d0       	rcall	.+506    	; 0x272 <__udivmodhi4>
  78:	cb 01       	movw	r24, r22
  7a:	f6 df       	rcall	.-20     	; 0x68 <_Z7sendIntj>
		send('0'+i%10);
  7c:	ce 01       	movw	r24, r28
  7e:	6a e0       	ldi	r22, 0x0A	; 10
  80:	70 e0       	ldi	r23, 0x00	; 0
  82:	f7 d0       	rcall	.+494    	; 0x272 <__udivmodhi4>
  84:	80 5d       	subi	r24, 0xD0	; 208
  86:	cd df       	rcall	.-102    	; 0x22 <_Z4sendh>
	}
}
  88:	df 91       	pop	r29
  8a:	cf 91       	pop	r28
  8c:	08 95       	ret

0000008e <_Z8printIntj>:
void printlnStr(char *ptr){
	printStr(ptr);
	sendInt('\n');
}
void printInt(unsigned int i){
	i?sendInt(i):send('0');
  8e:	00 97       	sbiw	r24, 0x00	; 0
  90:	11 f0       	breq	.+4      	; 0x96 <_Z8printIntj+0x8>
  92:	ea df       	rcall	.-44     	; 0x68 <_Z7sendIntj>
  94:	08 95       	ret
  96:	80 e3       	ldi	r24, 0x30	; 48
  98:	c4 df       	rcall	.-120    	; 0x22 <_Z4sendh>
  9a:	08 95       	ret

0000009c <_Z8printStrPc>:
void printHex(char ch){
	int i;
	for(i=4;i>=0;i-=4)
		((0x0F&(ch>>i))>9)?send('A'+(0x0F&((ch>>i)-10))):send('0'+(0x0F&(ch>>i)));
}
void printStr(char *ptr){
  9c:	cf 93       	push	r28
  9e:	df 93       	push	r29
  a0:	ec 01       	movw	r28, r24
  a2:	02 c0       	rjmp	.+4      	; 0xa8 <__stack+0x9>
	while(*ptr!='\0'){
		send(*ptr);
  a4:	be df       	rcall	.-132    	; 0x22 <_Z4sendh>
		ptr++;
  a6:	21 96       	adiw	r28, 0x01	; 1
	int i;
	for(i=4;i>=0;i-=4)
		((0x0F&(ch>>i))>9)?send('A'+(0x0F&((ch>>i)-10))):send('0'+(0x0F&(ch>>i)));
}
void printStr(char *ptr){
	while(*ptr!='\0'){
  a8:	88 81       	ld	r24, Y
  aa:	88 23       	and	r24, r24
  ac:	d9 f7       	brne	.-10     	; 0xa4 <__stack+0x5>
		send(*ptr);
		ptr++;
	}
}
  ae:	df 91       	pop	r29
  b0:	cf 91       	pop	r28
  b2:	08 95       	ret

000000b4 <_Z10printlnStrPc>:
void printlnStr(char *ptr){
	printStr(ptr);
  b4:	f3 df       	rcall	.-26     	; 0x9c <_Z8printStrPc>
	sendInt('\n');
  b6:	8a e0       	ldi	r24, 0x0A	; 10
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	d6 df       	rcall	.-84     	; 0x68 <_Z7sendIntj>
}
  bc:	08 95       	ret

000000be <_Z8printHexc>:
void printInt(unsigned int i);
void printStr(char *);
void printlnStr(char *ptr);
void printHex(char ch);

void printHex(char ch){
  be:	cf 93       	push	r28
  c0:	df 93       	push	r29
	int i;
	for(i=4;i>=0;i-=4)
		((0x0F&(ch>>i))>9)?send('A'+(0x0F&((ch>>i)-10))):send('0'+(0x0F&(ch>>i)));
  c2:	c8 2f       	mov	r28, r24
  c4:	d0 e0       	ldi	r29, 0x00	; 0
  c6:	ce 01       	movw	r24, r28
  c8:	24 e0       	ldi	r18, 0x04	; 4
  ca:	95 95       	asr	r25
  cc:	87 95       	ror	r24
  ce:	2a 95       	dec	r18
  d0:	e1 f7       	brne	.-8      	; 0xca <_Z8printHexc+0xc>
  d2:	8a 30       	cpi	r24, 0x0A	; 10
  d4:	91 05       	cpc	r25, r1
  d6:	1c f4       	brge	.+6      	; 0xde <_Z8printHexc+0x20>
  d8:	8f 70       	andi	r24, 0x0F	; 15
  da:	80 5d       	subi	r24, 0xD0	; 208
  dc:	03 c0       	rjmp	.+6      	; 0xe4 <_Z8printHexc+0x26>
  de:	8a 50       	subi	r24, 0x0A	; 10
  e0:	8f 70       	andi	r24, 0x0F	; 15
  e2:	8f 5b       	subi	r24, 0xBF	; 191
  e4:	9e df       	rcall	.-196    	; 0x22 <_Z4sendh>
  e6:	ce 01       	movw	r24, r28
  e8:	8f 70       	andi	r24, 0x0F	; 15
  ea:	90 70       	andi	r25, 0x00	; 0
  ec:	0a 97       	sbiw	r24, 0x0a	; 10
  ee:	34 f0       	brlt	.+12     	; 0xfc <_Z8printHexc+0x3e>
  f0:	9e 01       	movw	r18, r28
  f2:	2a 50       	subi	r18, 0x0A	; 10
  f4:	82 2f       	mov	r24, r18
  f6:	8f 70       	andi	r24, 0x0F	; 15
  f8:	8f 5b       	subi	r24, 0xBF	; 191
  fa:	04 c0       	rjmp	.+8      	; 0x104 <_Z8printHexc+0x46>
  fc:	9e 01       	movw	r18, r28
  fe:	2f 70       	andi	r18, 0x0F	; 15
 100:	82 2f       	mov	r24, r18
 102:	80 5d       	subi	r24, 0xD0	; 208
 104:	8e df       	rcall	.-228    	; 0x22 <_Z4sendh>
}
 106:	df 91       	pop	r29
 108:	cf 91       	pop	r28
 10a:	08 95       	ret

0000010c <_Z5blinkv>:
	 }
	return 0;
}

void blink(){
	PORTB|=(1<<LED_PIN);
 10c:	c3 9a       	sbi	0x18, 3	; 24
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
 10e:	86 e4       	ldi	r24, 0x46	; 70
 110:	91 e0       	ldi	r25, 0x01	; 1
 112:	01 97       	sbiw	r24, 0x01	; 1
 114:	f1 f7       	brne	.-4      	; 0x112 <_Z5blinkv+0x6>
	_delay_us(1500);
	PORTB&=~(1<<LED_PIN);
 116:	c3 98       	cbi	0x18, 3	; 24
}
 118:	08 95       	ret

0000011a <_Z7waitForh>:
		}
		return (uint16_t)((0x00ff0000&result)>>8)|(0x000000ff&result);
	}
	else return 0;
}
unsigned int waitFor(uint8_t HL){
 11a:	68 2f       	mov	r22, r24
 11c:	20 e0       	ldi	r18, 0x00	; 0
 11e:	30 e0       	ldi	r19, 0x00	; 0
unsigned int i=0;
	while(HL?(!(PINB&(1<<TSOP_PIN))):(PINB&(1<<TSOP_PIN))){
 120:	41 e0       	ldi	r20, 0x01	; 1
 122:	50 e0       	ldi	r21, 0x00	; 0
	__asm__ volatile (
		"1: dec %0" "\n\t"
		"brne 1b"
		: "=r" (__count)
		: "0" (__count)
	);
 124:	71 e0       	ldi	r23, 0x01	; 1
 126:	05 c0       	rjmp	.+10     	; 0x132 <_Z7waitForh+0x18>
 128:	87 2f       	mov	r24, r23
 12a:	8a 95       	dec	r24
 12c:	f1 f7       	brne	.-4      	; 0x12a <_Z7waitForh+0x10>
		_delay_us(1);
		i++;
 12e:	2f 5f       	subi	r18, 0xFF	; 255
 130:	3f 4f       	sbci	r19, 0xFF	; 255
	}
	else return 0;
}
unsigned int waitFor(uint8_t HL){
unsigned int i=0;
	while(HL?(!(PINB&(1<<TSOP_PIN))):(PINB&(1<<TSOP_PIN))){
 132:	66 23       	and	r22, r22
 134:	51 f0       	breq	.+20     	; 0x14a <_Z7waitForh+0x30>
 136:	86 b3       	in	r24, 0x16	; 22
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	f4 e0       	ldi	r31, 0x04	; 4
 13c:	96 95       	lsr	r25
 13e:	87 95       	ror	r24
 140:	fa 95       	dec	r31
 142:	e1 f7       	brne	.-8      	; 0x13c <_Z7waitForh+0x22>
 144:	84 27       	eor	r24, r20
 146:	95 27       	eor	r25, r21
 148:	07 c0       	rjmp	.+14     	; 0x158 <_Z7waitForh+0x3e>
 14a:	86 b3       	in	r24, 0x16	; 22
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	e4 e0       	ldi	r30, 0x04	; 4
 150:	96 95       	lsr	r25
 152:	87 95       	ror	r24
 154:	ea 95       	dec	r30
 156:	e1 f7       	brne	.-8      	; 0x150 <_Z7waitForh+0x36>
 158:	81 70       	andi	r24, 0x01	; 1
 15a:	31 f7       	brne	.-52     	; 0x128 <_Z7waitForh+0xe>
		_delay_us(1);
		i++;
	}
	return i;
}
 15c:	c9 01       	movw	r24, r18
 15e:	08 95       	ret

00000160 <_Z10pulseWidthh>:

unsigned int pulseWidth(uint8_t HL){
			HL?waitFor(1):waitFor(0);
 160:	88 23       	and	r24, r24
 162:	29 f0       	breq	.+10     	; 0x16e <_Z10pulseWidthh+0xe>
 164:	81 e0       	ldi	r24, 0x01	; 1
 166:	d9 df       	rcall	.-78     	; 0x11a <_Z7waitForh>
	return	HL?waitFor(0):waitFor(1);
 168:	80 e0       	ldi	r24, 0x00	; 0
 16a:	d7 df       	rcall	.-82     	; 0x11a <_Z7waitForh>
 16c:	08 95       	ret
	}
	return i;
}

unsigned int pulseWidth(uint8_t HL){
			HL?waitFor(1):waitFor(0);
 16e:	80 e0       	ldi	r24, 0x00	; 0
 170:	d4 df       	rcall	.-88     	; 0x11a <_Z7waitForh>
	return	HL?waitFor(0):waitFor(1);
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	d2 df       	rcall	.-92     	; 0x11a <_Z7waitForh>
 176:	08 95       	ret

00000178 <_Z10getMessagev>:
	PORTB|=(1<<LED_PIN);
	_delay_us(1500);
	PORTB&=~(1<<LED_PIN);
}

uint16_t getMessage(){
 178:	ef 92       	push	r14
 17a:	ff 92       	push	r15
 17c:	0f 93       	push	r16
 17e:	1f 93       	push	r17
 180:	df 93       	push	r29
 182:	cf 93       	push	r28
 184:	cd b7       	in	r28, 0x3d	; 61
 186:	de b7       	in	r29, 0x3e	; 62
 188:	a1 97       	sbiw	r28, 0x21	; 33
 18a:	0f b6       	in	r0, 0x3f	; 63
 18c:	f8 94       	cli
 18e:	de bf       	out	0x3e, r29	; 62
 190:	0f be       	out	0x3f, r0	; 63
 192:	cd bf       	out	0x3d, r28	; 61
	waitFor(0);
 194:	80 e0       	ldi	r24, 0x00	; 0
 196:	c1 df       	rcall	.-126    	; 0x11a <_Z7waitForh>
	waitFor(1);
 198:	81 e0       	ldi	r24, 0x01	; 1
 19a:	bf df       	rcall	.-130    	; 0x11a <_Z7waitForh>
	uint8_t i[33];
	uint8_t j=0;
	uint32_t result=0;
	i[0]=pulseWidth(1);
 19c:	81 e0       	ldi	r24, 0x01	; 1
 19e:	e0 df       	rcall	.-64     	; 0x160 <_Z10pulseWidthh>
	if(i[0]>=PREMBLE){
 1a0:	8a 39       	cpi	r24, 0x9A	; 154
 1a2:	18 f4       	brcc	.+6      	; 0x1aa <_Z10getMessagev+0x32>
 1a4:	20 e0       	ldi	r18, 0x00	; 0
 1a6:	30 e0       	ldi	r19, 0x00	; 0
 1a8:	42 c0       	rjmp	.+132    	; 0x22e <_Z10getMessagev+0xb6>
	waitFor(0);
	waitFor(1);
	uint8_t i[33];
	uint8_t j=0;
	uint32_t result=0;
	i[0]=pulseWidth(1);
 1aa:	89 83       	std	Y+1, r24	; 0x01
 1ac:	8e 01       	movw	r16, r28
 1ae:	0e 5f       	subi	r16, 0xFE	; 254
 1b0:	1f 4f       	sbci	r17, 0xFF	; 255
	if(i[0]>=PREMBLE){
		for(j=1;j<=32;j++){
 1b2:	92 e2       	ldi	r25, 0x22	; 34
 1b4:	e9 2e       	mov	r14, r25
 1b6:	f1 2c       	mov	r15, r1
 1b8:	ec 0e       	add	r14, r28
 1ba:	fd 1e       	adc	r15, r29
			i[j]=pulseWidth(1);
 1bc:	81 e0       	ldi	r24, 0x01	; 1
 1be:	d0 df       	rcall	.-96     	; 0x160 <_Z10pulseWidthh>
 1c0:	f8 01       	movw	r30, r16
 1c2:	81 93       	st	Z+, r24
 1c4:	8f 01       	movw	r16, r30
	uint8_t i[33];
	uint8_t j=0;
	uint32_t result=0;
	i[0]=pulseWidth(1);
	if(i[0]>=PREMBLE){
		for(j=1;j<=32;j++){
 1c6:	ee 15       	cp	r30, r14
 1c8:	ff 05       	cpc	r31, r15
 1ca:	c1 f7       	brne	.-16     	; 0x1bc <_Z10getMessagev+0x44>
			i[j]=pulseWidth(1);
		}
		for(j=32;j>=1;j--){
			result=result<<1;
			result|=(((i[j])>i[0]/4)?1:0);
 1cc:	99 81       	ldd	r25, Y+1	; 0x01
 1ce:	96 95       	lsr	r25
 1d0:	96 95       	lsr	r25
 1d2:	fe 01       	movw	r30, r28
 1d4:	b1 96       	adiw	r30, 0x21	; 33
 1d6:	20 e0       	ldi	r18, 0x00	; 0
 1d8:	30 e0       	ldi	r19, 0x00	; 0
 1da:	40 e0       	ldi	r20, 0x00	; 0
 1dc:	50 e0       	ldi	r21, 0x00	; 0
	i[0]=pulseWidth(1);
	if(i[0]>=PREMBLE){
		for(j=1;j<=32;j++){
			i[j]=pulseWidth(1);
		}
		for(j=32;j>=1;j--){
 1de:	be 01       	movw	r22, r28
 1e0:	6f 5f       	subi	r22, 0xFF	; 255
 1e2:	7f 4f       	sbci	r23, 0xFF	; 255
			result=result<<1;
 1e4:	79 01       	movw	r14, r18
 1e6:	8a 01       	movw	r16, r20
 1e8:	ee 0c       	add	r14, r14
 1ea:	ff 1c       	adc	r15, r15
 1ec:	00 1f       	adc	r16, r16
 1ee:	11 1f       	adc	r17, r17
			result|=(((i[j])>i[0]/4)?1:0);
 1f0:	20 e0       	ldi	r18, 0x00	; 0
 1f2:	30 e0       	ldi	r19, 0x00	; 0
 1f4:	40 e0       	ldi	r20, 0x00	; 0
 1f6:	50 e0       	ldi	r21, 0x00	; 0
 1f8:	80 81       	ld	r24, Z
 1fa:	98 17       	cp	r25, r24
 1fc:	20 f4       	brcc	.+8      	; 0x206 <_Z10getMessagev+0x8e>
 1fe:	21 e0       	ldi	r18, 0x01	; 1
 200:	30 e0       	ldi	r19, 0x00	; 0
 202:	40 e0       	ldi	r20, 0x00	; 0
 204:	50 e0       	ldi	r21, 0x00	; 0
 206:	2e 29       	or	r18, r14
 208:	3f 29       	or	r19, r15
 20a:	40 2b       	or	r20, r16
 20c:	51 2b       	or	r21, r17
 20e:	31 97       	sbiw	r30, 0x01	; 1
	i[0]=pulseWidth(1);
	if(i[0]>=PREMBLE){
		for(j=1;j<=32;j++){
			i[j]=pulseWidth(1);
		}
		for(j=32;j>=1;j--){
 210:	6e 17       	cp	r22, r30
 212:	7f 07       	cpc	r23, r31
 214:	39 f7       	brne	.-50     	; 0x1e4 <_Z10getMessagev+0x6c>
			result=result<<1;
			result|=(((i[j])>i[0]/4)?1:0);
		}
		return (uint16_t)((0x00ff0000&result)>>8)|(0x000000ff&result);
 216:	da 01       	movw	r26, r20
 218:	c9 01       	movw	r24, r18
 21a:	80 70       	andi	r24, 0x00	; 0
 21c:	90 70       	andi	r25, 0x00	; 0
 21e:	b0 70       	andi	r27, 0x00	; 0
 220:	89 2f       	mov	r24, r25
 222:	9a 2f       	mov	r25, r26
 224:	ab 2f       	mov	r26, r27
 226:	bb 27       	eor	r27, r27
 228:	30 70       	andi	r19, 0x00	; 0
 22a:	28 2b       	or	r18, r24
 22c:	39 2b       	or	r19, r25
	}
	else return 0;
}
 22e:	c9 01       	movw	r24, r18
 230:	a1 96       	adiw	r28, 0x21	; 33
 232:	0f b6       	in	r0, 0x3f	; 63
 234:	f8 94       	cli
 236:	de bf       	out	0x3e, r29	; 62
 238:	0f be       	out	0x3f, r0	; 63
 23a:	cd bf       	out	0x3d, r28	; 61
 23c:	cf 91       	pop	r28
 23e:	df 91       	pop	r29
 240:	1f 91       	pop	r17
 242:	0f 91       	pop	r16
 244:	ff 90       	pop	r15
 246:	ef 90       	pop	r14
 248:	08 95       	ret

0000024a <main>:
uint16_t getMessage();
void blink();
unsigned int waitFor(uint8_t HL);
uint16_t receivedMessage();

int main(void){
 24a:	1f 93       	push	r17
	uint16_t message;
	DDRB=(1<<pin)|(1<<LED_PIN);	
 24c:	89 e0       	ldi	r24, 0x09	; 9
 24e:	87 bb       	out	0x17, r24	; 23
	send('\n');
 250:	8a e0       	ldi	r24, 0x0A	; 10
 252:	e7 de       	rcall	.-562    	; 0x22 <_Z4sendh>
	 }
	return 0;
}

void blink(){
	PORTB|=(1<<LED_PIN);
 254:	c3 9a       	sbi	0x18, 3	; 24
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
 256:	86 e4       	ldi	r24, 0x46	; 70
 258:	91 e0       	ldi	r25, 0x01	; 1
 25a:	01 97       	sbiw	r24, 0x01	; 1
 25c:	f1 f7       	brne	.-4      	; 0x25a <main+0x10>
	_delay_us(1500);
	PORTB&=~(1<<LED_PIN);
 25e:	c3 98       	cbi	0x18, 3	; 24
	
	
	while(1){
		//printInt(pulseWidth(0));
		//blink();
		message=getMessage();
 260:	8b df       	rcall	.-234    	; 0x178 <_Z10getMessagev>
 262:	18 2f       	mov	r17, r24
		printHex((unsigned char)(message>>8));
 264:	89 2f       	mov	r24, r25
 266:	2b df       	rcall	.-426    	; 0xbe <_Z8printHexc>
		printHex((unsigned char)message);
 268:	81 2f       	mov	r24, r17
 26a:	29 df       	rcall	.-430    	; 0xbe <_Z8printHexc>
		send('\n');
 26c:	8a e0       	ldi	r24, 0x0A	; 10
 26e:	d9 de       	rcall	.-590    	; 0x22 <_Z4sendh>
 270:	f7 cf       	rjmp	.-18     	; 0x260 <main+0x16>

00000272 <__udivmodhi4>:
 272:	aa 1b       	sub	r26, r26
 274:	bb 1b       	sub	r27, r27
 276:	51 e1       	ldi	r21, 0x11	; 17
 278:	07 c0       	rjmp	.+14     	; 0x288 <__udivmodhi4_ep>

0000027a <__udivmodhi4_loop>:
 27a:	aa 1f       	adc	r26, r26
 27c:	bb 1f       	adc	r27, r27
 27e:	a6 17       	cp	r26, r22
 280:	b7 07       	cpc	r27, r23
 282:	10 f0       	brcs	.+4      	; 0x288 <__udivmodhi4_ep>
 284:	a6 1b       	sub	r26, r22
 286:	b7 0b       	sbc	r27, r23

00000288 <__udivmodhi4_ep>:
 288:	88 1f       	adc	r24, r24
 28a:	99 1f       	adc	r25, r25
 28c:	5a 95       	dec	r21
 28e:	a9 f7       	brne	.-22     	; 0x27a <__udivmodhi4_loop>
 290:	80 95       	com	r24
 292:	90 95       	com	r25
 294:	bc 01       	movw	r22, r24
 296:	cd 01       	movw	r24, r26
 298:	08 95       	ret

0000029a <_exit>:
 29a:	f8 94       	cli

0000029c <__stop_program>:
 29c:	ff cf       	rjmp	.-2      	; 0x29c <__stop_program>
